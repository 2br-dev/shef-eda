<?php
/**
* ReadyScript (http://readyscript.ru)
*
* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)
* @license http://readyscript.ru/licenseAgreement/
*/


namespace Antivirus\Model\Libs\Manul;


class MalwareDetector
{
    function __construct()
    {
        $this->SIGNATURE_FILENAME = __DIR__ . '/malware_db.xml';
        $this->XML_LOG_FILENAME = \Setup::$TMP_DIR . '/scan_log.xml';

        $this->SCRIPT_START = time();

        $this->MAX_FILESIZE = 1 * 1000 * 1000; // 1MB
        $this->MAX_PREVIEW_LENGTH = 80; // characters

        $validator = new XmlValidator();
        if (!$validator->validate(implode('', file($this->SIGNATURE_FILENAME)), __DIR__ . '/malware_db.xsd'))
        {
            throw new \Exception(t('Файл вирусной базы поврежден'));
        }

        $this->signatures = new \DOMDocument();
        $this->signatures->load($this->SIGNATURE_FILENAME);
    }


    function normalizeContent($content)
    {
        $escapedHexToHex = function ($escaped)
        {
            return chr(hexdec($escaped[1]));
        };

        $escapedOctDec = function ($escaped)
        {
            return chr(octdec($escaped[1]));
        };

        $content = preg_replace_callback('/\\\\x([a-fA-F0-9]{1,2})/i', $escapedHexToHex, $content); // strip hex ascii notation
        $content = preg_replace_callback('/\\\\([0-9]{1,3})/i', $escapedOctDec, $content); // strip dec ascii notation
        $content = preg_replace('/[\'"]\s*?\.\s*?[\'"]/smi', '', $content); // concat fragmented strings
        $content = preg_replace('|/\*.*?\*/|smi', '', $content); // remove comments to detect fragmented pieces of malware

        return $content;
    }

    function getFragment($content, $pos)
    {
        $maxChars = $this->MAX_PREVIEW_LENGTH;
        $maxLen = strlen($content);
        $rightPos = min($pos + $maxChars, $maxLen);
        $minPos = max(0, $pos - $maxChars);

        $start = substr($content, 0, $pos);
        $start = str_replace('\r', '', $start);
        $lineNo = strlen($start) - strlen(str_replace("\n", '', $start)) + 1;

        $res = 'L' . $lineNo . ': ' . substr($content, $minPos, $pos - $minPos) .
            '@_MARKER_@' .
            substr($content, $pos, $rightPos - $pos - 1);

        return htmlspecialchars($res);
    }

    function checkForValidPhp($content)
    {
        $len = strlen($content);
        $start = 0;
        $valid = false;

        while (($start = strpos($content, '<?', $start)) !== false) {
            $valid = true;
            $start++;
            $end = strpos($content, '?>', $start + 1);
            if ($end === false) {
                $end = $len;
            }

            while (++$start < $end) {
                $c = ord($content[$start]);
                if ($c < 9 || ($c >= 14 && $c <= 31) || $c == 11 || $c == 12) {
                    return false;
                }
            }
        }

        return $valid;
    }

    /**
     * @param $filePath
     * @param $foundFragment
     * @param $pos
     * @param $startTime
     * @param $timeout
     * @return MalwareInfo|string
     */
    function detectMalware($filePath, &$foundFragment, &$pos, $startTime, $timeout)
    {
        if (filesize($filePath) > $this->MAX_FILESIZE) {
            return 'skipped';
        }

        if (!is_file($filePath)) {
            return 'no_read';
        }

        $needToScan = false;
        $ext        = $fileExtension = pathinfo(basename($filePath), PATHINFO_EXTENSION);
        $extensions = array('ph' /* php, php3, phtml */, 'htm' /* htm, html */, 'txt', 'js', 'pl', 'cgi', 'py', 'bash', 'sh', 'xml', 'ssi', 'inc', 'pm', 'tpl');

        // do scan for all kind of scripts 
        foreach ($extensions as $scanExt) {
            if (strpos($ext, $scanExt) !== false) {
                $needToScan = true;
            }
        }

        $content = implode('', file($filePath));

        $fileToBeScannedSignatureList = array(
            '<?php
/**
* ReadyScript (http://readyscript.ru)
*
* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)
* @license http://readyscript.ru/licenseAgreement/
*/',
            '<?=',
            '#!/usr/',
            '#!/bin/',
            '#!/local/',
            'eval(',
            'assert(',
            'base64_decode('
        );

        if (!$needToScan) {
            foreach ($fileToBeScannedSignatureList as $scanSig) {
                if (strpos($content, $scanSig) !== false) {
                    $needToScan = true;
                }
            }
        }

        if (!$needToScan && $this->checkForValidPhp($content)) {
            $needToScan = true;
        }

        if (!$needToScan) {
            return 'no_need_to_check';
        }

        $normalized = $this->normalizeContent($content);

        $db = $this->signatures->getElementsByTagName('signature');
        $detected = false;

        foreach ($db as $sig) {
            if ($detected) break;

            $currentTime = time();
            if ($currentTime - $startTime > $timeout) {
                return 'timeout';
            }

            $pos = -1;
            $sigContent = $sig->nodeValue;
            $attr = $sig->attributes;
            $attrId = $attr->getNamedItem('id')->nodeValue;
            $attrTitle = $attr->getNamedItem('title')->nodeValue;
            $attrFormat = $attr->getNamedItem('format')->nodeValue;
            $attrChildId = $attr->getNamedItem('child_id')->nodeValue;
            $attrSeverity = $attr->getNamedItem('sever')->nodeValue;

            // Skip not critical
            if($attrTitle === MalwareInfo::TITLE_SUSPICIOUS)
            {
                continue;
            }

            switch ($attrFormat) {

                case 're':
                    if ((preg_match('#(' . $sigContent . ')#smi', $content, $found, PREG_OFFSET_CAPTURE)) ||
                        (preg_match('#(' . $sigContent . ')#smi', $normalized, $found, PREG_OFFSET_CAPTURE))
                    ) {
                        $detected = true;
                        $pos = $found[0][1];
                        continue;
                    }

                    break;
                case 'const':
                    if ((($pos = strpos($content, $sigContent)) !== FALSE) ||
                        (($pos = strpos($normalized, $sigContent)) !== FALSE)
                    ) {
                        $detected = true;
                        continue;
                    }

                    break;
            }
        }

        if ($detected) {
            $foundFragment = $this->getFragment($content, $pos);

            $malwareInfo            = new MalwareInfo();
            $malwareInfo->title     = $attrTitle;
            $malwareInfo->filename  = $filePath;
            $malwareInfo->pos       = $pos;
            $malwareInfo->fragment  = $foundFragment;
            $malwareInfo->signatureId = $attrId;
            $malwareInfo->signature = $sigContent;

            return $malwareInfo;
        }
    }



} // End of class
